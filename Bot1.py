import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "8228197550:AAEAbnaXdCLR2qARF37ah4bDERyOk-Q0kcY" 
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è)
def caesar_cipher(text: str, shift: int) -> str:
    result = ""
    for char in text:
        if char.isalpha():
            start = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - start + shift) % 26 + start)
        else:
            result += char
    return result


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è üîê\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "`/encrypt <—Ç–µ–∫—Å—Ç> <—Å–¥–≤–∏–≥>` ‚Äî –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n"
        "`/decrypt <—Ç–µ–∫—Å—Ç> <—Å–¥–≤–∏–≥>` ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å",
        parse_mode="Markdown"
    )


@dp.message_handler(commands=['encrypt'])
async def encrypt_text(message: types.Message):
    try:
        _, text, shift = message.text.split(" ", 2)
        shift = int(shift)
        encrypted = caesar_cipher(text, shift)
        await message.reply(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n`{encrypted}`", parse_mode="Markdown")
    except Exception:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/encrypt —Ç–µ–∫—Å—Ç —Å–¥–≤–∏–≥`", parse_mode="Markdown")


@dp.message_handler(commands=['decrypt'])
async def decrypt_text(message: types.Message):
    try:
        _, text, shift = message.text.split(" ", 2)
        shift = int(shift)
        decrypted = caesar_cipher(text, -shift)
        await message.reply(f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n`{decrypted}`", parse_mode="Markdown")
    except Exception:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/decrypt —Ç–µ–∫—Å—Ç —Å–¥–≤–∏–≥`", parse_mode="Markdown")


if name == '__main__':
    executor.start_polling(dp, skip_updates=True)